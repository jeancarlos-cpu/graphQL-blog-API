type Query {
  me: User
  users(query: String): [User]
  posts(query: String): [Post]
  comments: [Comment]
}

type Mutation {
  createUser(data: CreateUserInput): userPayload!
  deleteUser(id: ID!): User!
  updateUser(data: updateUserInput): User!
  createPost(data: CreatePostInput): Post!
  deletePost(id: ID!): Post!
  updatePost(id: ID!, data: updatePostInput): Post!
  createComment(data: CreateCommentInput): Comment!
  deleteComment(id: ID!): Comment!
  updateComment(id: ID!, data: updateCommentInput): Comment!
  login(data: userCredentialsInput!): userPayload!
}

input userCredentialsInput {
  email: String!
  password: String!
}

type userPayload {
  token: String!
  user: User!
}

type Subscription {
  comment(postId: ID!): CommentSubscriptionPayload
  post: PostSubscriptionPayload
}

input CreateUserInput {
  name: String!
  email: String!
  password: String!
}

input updateUserInput {
  name: String
  email: String
  password: String
}

input CreatePostInput {
  title: String!
  body: String!
  published: Boolean!
}

input updatePostInput {
  title: String
  body: String
  published: Boolean
}

input CreateCommentInput {
  text: String!
  author: ID!
  post: ID!
}

input updateCommentInput {
  text: String
}

type User {
  id: ID!
  name: String!
  email: String!
  password: String!
  posts: [Post]
  comments: [Comment]
}

type Post {
  id: ID!
  title: String!
  body: String!
  published: Boolean!
  author: User!
  comments: [Comment]
}

type Comment {
  id: ID!
  text: String!
  author: User!
  post: Post!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

type PostSubscriptionPayload {
  mutation: MutationType
  node: Post
}

type CommentSubscriptionPayload {
  mutation: MutationType
  node: Comment
}

